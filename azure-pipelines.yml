# Builds the Betaflight firmware
#
# After building, artifacts are released to a seperate repository.
#
# Azure Pipelines requires the following extensions to be installed:
# - GitHub Tool: https://marketplace.visualstudio.com/items?itemName=marcelo-formentao.github-tools
#
# You'll also need to setup the follwing pipeline variables: 
#     "releaseNotes" - This is used to add the release notes in the windows job in the build stage so they can be published as part of the github release in the release stage
#     "endpoint" - The name of the github endpoint link setup in AzDo - setup when linking AzDo and GitHub
#     "owner" - The owner of the repository to release to e.g. betaflight
#     "repoName" - The name of the repository to release to e.g. betaflight-configurator-nightly


variables:
  owner: derdanu
  repoName: betaflight-akramode-nightly
  releaseNotes: This is a build of a akramode enabled nightly on tip of betaflight master. It may be unstable and result in corrupted configurations or data loss. **Use only for testing.**

name: $(Build.RequestedFor)_$(Build.SourceBranchName)_$(BuildID)

trigger: none

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
      - master

stages:
- stage: Build
  jobs:
  - job: 'Linux'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - script: git clone https://github.com/betaflight/betaflight.git
      displayName: 'Cloning Betaflight Sourcecode'
    - script: cd betaflight; make arm_sdk_install
      displayName: 'Install the build toolchain'
    - script: cd betaflight; git apply ../firmware.patch
      displayName: 'Patching Akramode'
    - script: cd betaflight; make unified
      displayName: 'Build Unified Targets'
    - script: cd betaflight; mkdir release; cp obj/*.hex release/
      displayName: 'Copy artefacts'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Linux release'
      inputs: 
        artifactName: betaflight
        targetPath: '$(System.DefaultWorkingDirectory)/betaflight/release/'

- stage: Release
  jobs:
  - job: Release

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - powershell: Write-Output ("##vso[task.setvariable variable=today;]$(Get-Date -Format yyyyMMdd)")
    - task: GitHubReleasePublish@1
      inputs:
        githubEndpoint: '$(endpoint)'
        manuallySetRepository: true
        githubOwner: '$(owner)'
        githubRepositoryName: '$(repoName)'
        githubTag: $(today).$(Build.Repository.Name).$(Build.SourceBranchName)
        githubReleaseTitle: '$(Build.Repository.Name): $(Build.SourceBranchName) ($(today))'
        githubReleaseNotes: |+
          $(releaseNotes)
        githubReleaseDraft: false
        githubReleasePrerelease: false
        githubIgnoreAssets: false
        githubReleaseAsset: |
          $(Pipeline.Workspace)/betaflight/**
        githubReuseRelease: true
        githubReuseDraftOnly: false
        githubSkipDuplicatedAssets: false
        githubEditRelease: true
        githubDeleteEmptyTag: false